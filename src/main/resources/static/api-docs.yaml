openapi: 3.0.3
info:
  title: VK Segmentation API
  description: API for managing VK user segments and distribution for VK Analytics Team.
  version: 1.0.0
  contact:
    name: Erdogan Batuhan
    email: batuhane2401@gmail.com
servers:
  - url: http://localhost:8080
    description: Development server

paths:
  /distribution:
    put:
      tags:
        - Distribution
      summary: Distribute segment to users
      description: Distributes a segment to users based on the specified percentage
      parameters:
        - name: percentage
          in: query
          required: true
          description: Percentage of users to distribute (0-100)
          schema:
            type: number
            format: double
            minimum: 0.1
            maximum: 100
            example: 25.5
        - name: segmentName
          in: query
          required: true
          description: Name of the segment to distribute
          schema:
            type: string
            example: "premium-users"
      responses:
        '200':
          description: Distribution successful
          content:
            application/json:
              schema:
                type: boolean
                example: true
        '400':
          description: Bad request - Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: "2024-01-15T10:30:00"
                message: "Percentage must be greater than 0 and less than or equal to 100."
                path: "/Distribution"

  /segment/all:
    get:
      tags:
        - Segment
      summary: Get all segments
      description: Retrieves a list of all available segments
      responses:
        '200':
          description: List of segments retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VkSegmentDto'

  /segment/{id}:
    get:
      tags:
        - Segment
      summary: Get segment by ID
      description: Retrieves a specific segment by its ID
      parameters:
        - name: id
          in: path
          required: true
          description: Segment ID
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Segment retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VkSegmentDto'
        '404':
          description: Segment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    patch:
      tags:
        - Segment
      summary: Update segment
      description: Updates an existing segment
      parameters:
        - name: id
          in: path
          required: true
          description: Segment ID
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VkSegmentPostDto'
      responses:
        '200':
          description: Segment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VkSegmentDto'
        '404':
          description: Segment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Segment
      summary: Delete segment by ID
      description: Deletes a segment by its ID
      parameters:
        - name: id
          in: path
          required: true
          description: Segment ID
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Segment deletion status
          content:
            application/json:
              schema:
                type: boolean
                example: true
        '404':
          description: Segment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /segment/name/{name}:
    get:
      tags:
        - Segment
      summary: Get segment by name
      description: Retrieves a specific segment by its name
      parameters:
        - name: name
          in: path
          required: true
          description: Segment name
          schema:
            type: string
            example: "premium-users"
      responses:
        '200':
          description: Segment retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VkSegmentDto'
        '404':
          description: Segment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Segment
      summary: Delete segment by name
      description: Deletes a segment by its name
      parameters:
        - name: name
          in: path
          required: true
          description: Segment name
          schema:
            type: string
            example: "premium-users"
      responses:
        '200':
          description: Segment deletion status
          content:
            application/json:
              schema:
                type: boolean
                example: true
        '404':
          description: Segment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /segment:
    post:
      tags:
        - Segment
      summary: Create new segment
      description: Creates a new segment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VkSegmentPostDto'
      responses:
        '201':
          description: Segment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VkSegmentDto'
        '400':
          description: Bad request - Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/all:
    get:
      tags:
        - User
      summary: Get all users
      description: Retrieves a list of all users
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VkUserDto'

  /user/{id}:
    get:
      tags:
        - User
      summary: Get user by ID
      description: Retrieves a specific user by their ID
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VkUserDto'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - User
      summary: Update user
      description: Updates an existing user
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VkUserPostDto'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VkUserDto'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - User
      summary: Delete user
      description: Deletes a user by their ID
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: User deletion status
          content:
            application/json:
              schema:
                type: boolean
                example: true
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user:
    post:
      tags:
        - User
      summary: Create new user
      description: Creates a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VkUserPostDto'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VkUserDto'
        '400':
          description: Bad request - Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    VkSegmentDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the segment
          example: 1
        segmentName:
          type: string
          description: Name of the segment
          example: "premium-users"
      required:
        - id
        - segmentName

    VkSegmentPostDto:
      type: object
      properties:
        segmentName:
          type: string
          description: Name of the segment
          example: "premium-users"
          minLength: 1
          maxLength: 255
      required:
        - segmentName

    VkUserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the user
          example: 1
      required:
        - id

    VkUserPostDto:
      type: object
      properties: {}
      description: User creation data (currently no fields defined)

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: Timestamp when the error occurred
          example: "2024-01-15T10:30:00"
        message:
          type: string
          description: Error message
          example: "Resource not found"
        path:
          type: string
          description: Request path that caused the error
          example: "/segment/999"
      required:
        - timestamp
        - message
        - path

tags:
  - name: Distribution
    description: Operations related to segment distribution
  - name: Segment
    description: Operations related to segment management
  - name: User
    description: Operations related to user management